movies <- read.csv("movies.csv")
movieActors <- read.csv("movie_actors.csv", header = TRUE)
movieActors <- read.csv("movie_actors.csv", header = TRUE,
stringsAsFactors = FALSE)
movies <- read.csv("movies.csv", header = TRUE, stringsAsFactors = FALSE)
head(movies)
colURL <- grep(pattern = "URL", x = names(movies))
colRating <- grep(pattern = "rt", x = names(movies), ignore.case = FALSE)
names(movies)[colRating]
colRating <- colRating[!(colRating %in% c(7, colURL))]
summary(movies)
movies[, colRating] <- lapply(movies[, colRating], as.numeric )
warnings()
movies <- read.csv("movies.csv", header = TRUE, stringsAsFactors = FALSE)
apply(movies[, colRating], table)
apply(movies[, colRating], 2, table)
movies <- read.csv("movies.csv", header = TRUE, stringsAsFactors = FALSE,
na.strings = "\\N")
movieActors <- read.csv("movie_actors.csv", header = TRUE,
stringsAsFactors = FALSE, na.strings = "\\N")
moviesRT[, colRating] <- lapply(movies[, colRating], as.numeric)
colURL <- grep(pattern = "URL", x = names(movies))
colRating <- grep(pattern = "rt", x = names(movies), ignore.case = FALSE)
colRating <- colRating[!(colRating %in% c(7, colURL))]
moviesRT <- lapply(movies[, colRating], as.numeric)
apply(moviesRT, 2, summary)
lapply(moviesRT, summary)
names(movies)
cor.test(movies$rtAllCriticsRating, movies$rtAllCriticsScore)
names(movies)
plot(movies$rtAudienceScore, movies$rtAudienceRating)
library(dplyr)
library(ggplot2)
moviesTBL <- as.tbl(movies)
moviesTBL
pairs(movies[, colRating])
sum(apply(colRating, 1, function(r) all(r == 0)))
apply(colRating, 1, function(r) all(r == 0))
apply(movies[, colRating], 1, function(r) all(r == 0))
mean(apply(movies[, colRating], 1, function(r) all(r == 0)))
movies <- movies[complete.cases(movies), ]
mean(apply(movies[, colRating], 1, function(r) all(r == 0)))
mean(apply(movies[, colRating], 1, function(r) any(r == 0)))
apply(movies[, colRating], 2, function(r) mean(r == 0))
sum(movies$rtID == "")
movies <- read.csv("movies.csv", header = TRUE, stringsAsFactors = FALSE,
na.strings = "\\N")
nAllNA <- sum(!complete.cases(movies))
nAllNA
apply(movies, 2, anyNA)
movies <- read.csv("movies.csv", header = TRUE, stringsAsFactors = FALSE,
na.strings = c("\\N", "", " "))
apply(movies, 2, anyNA)
install.packages("wordcloud")
library(wordcloud)
wordcloud(words = movies$title, freq = runif(nrow(movies)))
wordcloud(words = letters, freq = runif(length(letters)))
rm(list = ls())
colURL <- grep(pattern = "URL", x = names(movies))
movies <- read.csv("movies.csv", header = TRUE, stringsAsFactors = FALSE,
na.strings = c("\\N", "", " "))
colURL <- grep(pattern = "URL", x = names(movies))
colRating <- grep(pattern = "rt", x = names(movies), ignore.case = FALSE)
colRating <- colRating[!(colRating %in% c(7, colURL))]
names(movies)[apply(movies, 2, anyNA)]
nNA <- sum(!complete.cases(movies))
head(movies[!complete.cases(movies), ])
names(movies)[apply(movies, 2, anyNA)]
names(movies)
nNA <- sum(!complete.cases(movies[, -colURL]))
head(movies[!complete.cases(movies), ])
movies <- movies[complete.cases(movies[, -colURL]), ]
mean(apply(movies[, colRating], 1, function(r) all(r == 0)))
propAll0 <- mean(apply(movies[, colRating], 1, function(r) all(r == 0)))
propAny0 <- mean(apply(movies[, colRating], 1, function(r) any(r == 0)))
propAny0 <- apply(movies[, colRating], 1, function(r) any(r == 0))
propAny0
propAny0 <- apply(movies[, colRating], 2, function(r) any(r == 0))
apply(movies[, colRating], 2, function(r) mean(r == 0))
propEach0 <- apply(movies[, colRating], 2, function(r) mean(r == 0))
shiny::runApp()
movies <- read.csv("www/movies.csv", header = TRUE, stringsAsFactors = FALSE,
na.strings = "\\N")
movieActors <- read.csv("www/movie_actors.csv", header = TRUE,
stringsAsFactors = FALSE, na.strings = "\\N")
library(grid)
range(movieActors$movieID)
tapply(X = movieActors$ranking, INDEX = movieActors$movieID, table)
tapply(X = movieActors$ranking, INDEX = movieActors$movieID, function(x) length(unique(x)))
nActor <- tapply(X = movieActors$ranking, INDEX = movieActors$movieID, function(x) length(unique(x)))
score <- read.csv("www/any.csv", header = TRUE, stringsAsFactors = FALSE)
View(score)
View(movies)
View(score)
movies <- read.csv("movies.csv", header = TRUE, stringsAsFactors = FALSE,
na.strings = c("\\N", "", " "))
names(movies)
colURL <- grep(pattern = "URL", x = names(movies))
colRating <- grep(pattern = "rt", x = names(movies), ignore.case = FALSE)
colRating <- colRating[!(colRating %in% c(7, colURL))]
rm(list = ls())
movies <- read.csv("movies.csv", header = TRUE, stringsAsFactors = FALSE,
na.strings = c("\\N", "", " "))
names(movies)
rm(list = ls())
movie_table <- read.csv("movies.csv", stringsAsFactors = FALSE, header = TRUE)
matching_table <- read.csv("movie_actors.csv", stringsAsFactors = FALSE, header = TRUE)
colnames(movie_table)[1] <- "movieID"
movie_table[,8:20] <- apply(movie_table[,8:20],2,as.numeric)
movie_table <- movie_table[!is.na(movie_table[,8]),]
movie_table <- read.csv("movies.csv", stringsAsFactors = FALSE, header = TRUE,
na.strings = c("\\N", "", " "))
matching_table <- read.csv("movie_actors.csv", stringsAsFactors = FALSE,
header = TRUE)
colnames(movie_table)[1] <- "movieID"
movie_table[,8:20] <- apply(movie_table[,8:20],2,as.numeric)
movie_table <- movie_table[!is.na(movie_table[,8]),]
tmp <- apply(movie_table[8:20],1,function(a) all(a==0))
movie_table <- movie_table[!tmp,]
N <- nrow(movie_table)
tmp <- lapply(8:20, function(a) rank(movie_table[,a])/N)
tmp <- do.call('cbind',tmp)
colnames(tmp) <- colnames(movie_table)[8:20]
tmp[,grep("rotten",tolower(colnames(tmp)))]=tmp[,grep("rotten",tolower(colnames(tmp)))]*(-1)
movie_table$overall.rating <- apply(tmp,1,mean)
tmp <- movie_table[,c('title','overall.rating')]
write.csv(tmp,'any.csv')
names(movie_table)
colnames(tmp)
colnames(movie_table)[8:20]
val <- movie_table[, c(8:20, 22)]
View(val)
range(val$rtAudienceNumRatings)
summary(val$rtAudienceNumRatings)
hist(val$rtAudienceNumRatings)
hist(val$rtAudienceNumRatings, breaks = 100)
mean(val$rtAudienceNumRatings < 1000)
mean(val$rtAudienceNumRatings < 2000)
mean(val$rtAudienceNumRatings < 10000)
mean(val$rtAudienceNumRatings < 20000)
mean(val$rtAudienceNumRatings < 50000)
hist(val$rtAudienceNumRatings[val$rtAudienceNumRatings < 50000], breaks = 100)
boxplot(val$rtAudienceNumRatings)
assignScore <- function(z, theta, startFrom = 1) {
theta <- sort(theta)
sapply(z,
function(z) {
J <- length(theta) + 1
if (z <= theta[1]) {
1
} else if (z > theta[J - 1]) {
J
} else {
for (j in 2:(J - 1)) {
if ((z > theta[j - 1]) & (z <= theta[j])) {
return(j)
}
}) - 1 + startFrom
}
breaks = seq(from = 0.1, to = 0.9, by = 0.1)
breaks
colVec <- colorRampPalette(c("seashell", "red"))(length(breaks) + 1)
colVec
plot(x = seq_along(colVec), y = rep(1, length(colVec)), pch = 20, col = colVec)
assignScore <- function(z, theta, startFrom = 1) {
theta <- sort(theta)
sapply(z,
function(z) {
J <- length(theta) + 1
if (z <= theta[1]) {
1
} else if (z > theta[J - 1]) {
J
} else {
for (j in 2:(J - 1)) {
if ((z > theta[j - 1]) & (z <= theta[j])) {
return(j)
}
}) - 1 + startFrom
}
colVec[assignScore(z = x, theta = breaks)]
val$rtAllCriticsRating
x = val$rtAllCriticsRating
breaks = breaks * 10
colVec[assignScore(z = x, theta = breaks)]
setColor <- function(x, breaks) {
colVec <- colorRampPalette(c("seashell", "red"))(length(breaks) + 1)
colVec[assignScore(z = x, theta = breaks)]
}
apply(val, 2, range)
hist(val$rtAllCriticsNumReviews)
seq(from = 1, to = 300, length.out = 9)[-1]
seq(from = 1, to = 300, length.out = 10)[2:9]
seq(from = 1, to = 250, length.out = 10)[2:9]
seq(from = 1, to = 250, length.out = 9)
(1:9) * 30
breaksMat <- cbind(1:9,
(1:9) * 30,
(1:9) * 27,
(1:9) * 12,
(1:9) * 10,
1:9,
(1:9) * 5,
(1:9) * 10,
(1:9) * 0.5,
(1:9) * 5000,
(1:9) * 10,
(1:9) * 0.1)
breaksMat
dim(val)
colMat <- sapply(1:ncol(val), function(j) {
setColor(x = val[, j], breaks = breaksMat[, j])
})
dim(colMat)
pushViewport(plotViewport(margins = c(4, 4, 1, 1),
xscale = c(0.5, ncol(colMat) + 0.5),
yscale = c(0.5, nrow(colMat) + 0.5)))
dev.off()
pushViewport(plotViewport(margins = c(4, 4, 1, 1),
xscale = c(0.5, ncol(colMat) + 0.5),
yscale = c(0.5, nrow(colMat) + 0.5)))
grid.rect()
for (i in 1:nrow(colMat)) {
for (j in 1:ncol(colMat)) {
x <- j
y <- nrow(colMat) - i + 1
grid.rect(x = x, y = y, width = 0.5, height = 0.5, default.units = "native",
gp = gpar(col = "white", fill = colMat[i, j]))
}
png("www/heatmap.png", width = 100, height = 1000)
pushViewport(plotViewport(margins = c(4, 4, 1, 1),
xscale = c(0.5, ncol(colMat) + 0.5),
yscale = c(0.5, nrow(colMat) + 0.5)))
grid.rect()
for (i in 1:nrow(colMat)) {
for (j in 1:ncol(colMat)) {
x <- j
y <- nrow(colMat) - i + 1
grid.rect(x = x, y = y, width = 0.5, height = 0.5, default.units = "native",
gp = gpar(col = "white", fill = colMat[i, j]))
}
popViewport()
dev.off()
clusters <- hclust(colMat[, 1:(ncol(colMat) - 1)])
colMat[, 1:(ncol(colMat) - 1)]
clusters <- hclust(val[, 1:(ncol(colMat) - 1)])
val[, 1:(ncol(colMat) - 1)]
anyNA(val)
clusters <- hclust(dist(val[, 1:(ncol(colMat) - 1)]))
clusters$order
plot(clusters)
colMatClust <- colMat[, clusters$order]
colMatClust <- colMat[clusters$order, ]
png("www/heatmapClust.png", width = 200, height = 1000)
pushViewport(plotViewport(margins = c(4, 4, 1, 1),
xscale = c(0.5, ncol(colMatClust) + 0.5),
yscale = c(0.5, nrow(colMatClust) + 0.5)))
grid.rect()
for (i in 1:nrow(colMatClust)) {
for (j in 1:ncol(colMatClust)) {
x <- j
y <- nrow(colMatClust) - i + 1
grid.rect(x = x, y = y, width = 0.5, height = 0.5, default.units = "native",
gp = gpar(col = "white", fill = colMatClust[i, j]))
}
setColor <- function(x, breaks, col = "darkorange") {
colVec <- colorRampPalette(c("seashell", col))(length(breaks) + 1)
colVec[assignScore(z = x, theta = breaks)]
}
colMat <- sapply(1:ncol(val), function(j) {
if (j == ncol(val)) {
col <- "steelblue"
} else {
col <- "darkorange"
}
setColor(x = val[, j], breaks = breaksMat[, j], col = col)
})
png("www/heatmapClust.png", width = 200, height = 1000)
pushViewport(plotViewport(margins = c(4, 4, 1, 1),
xscale = c(0.5, ncol(colMatClust) + 0.5),
yscale = c(0.5, nrow(colMatClust) + 0.5)))
grid.rect()
for (i in 1:nrow(colMatClust)) {
for (j in 1:ncol(colMatClust)) {
x <- j
y <- nrow(colMatClust) - i + 1
grid.rect(x = x, y = y, width = 0.5, height = 0.5, default.units = "native",
gp = gpar(col = "white", fill = colMatClust[i, j]))
}
popViewport()
dev.off()
png("www/heatmapClust.png", width = 200, height = 1000)
pushViewport(plotViewport(margins = c(4, 4, 1, 1),
xscale = c(0.5, ncol(colMatClust) + 0.5),
yscale = c(0.5, nrow(colMatClust) + 0.5)))
grid.rect()
for (i in 1:nrow(colMatClust)) {
for (j in 1:ncol(colMatClust)) {
x <- j
y <- nrow(colMatClust) - i + 1
grid.rect(x = x, y = y, width = 0.5, height = 0.5, default.units = "native",
gp = gpar(col = NA, fill = colMatClust[i, j]))
}
popViewport()
dev.off()
colMat <- sapply(1:ncol(val), function(j) {
if (j == ncol(val)) {
col <- "steelblue"
} else {
col <- "darkorange"
}
setColor(x = val[, j], breaks = breaksMat[, j], col = col)
})
clusters <- hclust(dist(val[, 1:(ncol(colMat) - 1)]))
colMatClust <- colMat[clusters$order, ]
png("www/heatmapClust.png", width = 200, height = 1000)
pushViewport(plotViewport(margins = c(4, 4, 1, 1),
xscale = c(0.5, ncol(colMatClust) + 0.5),
yscale = c(0.5, nrow(colMatClust) + 0.5)))
grid.rect()
for (i in 1:nrow(colMatClust)) {
for (j in 1:ncol(colMatClust)) {
x <- j
y <- nrow(colMatClust) - i + 1
grid.rect(x = x, y = y, width = 0.5, height = 0.5, default.units = "native",
gp = gpar(col = NA, fill = colMatClust[i, j]))
}
popViewport()
dev.off()
colMatOrder <- colMat[sort.list(val$overall.rating, decreasing = TRUE), ]
colMatClust <- colMat[clusters$order, ]
png("www/heatmapClust.png", width = 200, height = 1000)
pushViewport(plotViewport(margins = c(4, 4, 1, 1),
xscale = c(0.5, ncol(colMatClust) + 0.5),
yscale = c(0.5, nrow(colMatClust) + 0.5)))
grid.rect()
for (i in 1:nrow(colMatClust)) {
for (j in 1:ncol(colMatClust)) {
x <- j
y <- nrow(colMatClust) - i + 1
grid.rect(x = x, y = y, width = 1, height = 1, default.units = "native",
gp = gpar(col = NA, fill = colMatClust[i, j]))
}
popViewport()
dev.off()
colMatOrder <- colMat[sort.list(val$overall.rating, decreasing = TRUE), ]
png("www/heatmapOrder.png", width = 200, height = 1000)
pushViewport(plotViewport(margins = c(4, 4, 1, 1),
xscale = c(0.5, ncol(colMatOrder) + 0.5),
yscale = c(0.5, nrow(colMatOrder) + 0.5)))
grid.rect()
for (i in 1:nrow(colMatOrder)) {
for (j in 1:ncol(colMatOrder)) {
x <- j
y <- nrow(colMatOrder) - i + 1
grid.rect(x = x, y = y, width = 1, height = 1, default.units = "native",
gp = gpar(col = NA, fill = colMatOrder[i, j]))
}
popViewport()
dev.off()
png("www/heatmapOrder.png", width = 500, height = 1000)
pushViewport(plotViewport(margins = c(4, 4, 1, 1),
xscale = c(0.5, ncol(colMatOrder) + 0.5),
yscale = c(0.5, nrow(colMatOrder) + 0.5)))
grid.rect()
for (i in 1:nrow(colMatOrder)) {
for (j in 1:ncol(colMatOrder)) {
x <- j
y <- nrow(colMatOrder) - i + 1
grid.rect(x = x, y = y, width = 1, height = 1, default.units = "native",
gp = gpar(col = NA, fill = colMatOrder[i, j]))
}
png("www/heatmapOrder.png", width = 500, height = 1000)
pushViewport(plotViewport(margins = c(4, 4, 1, 1),
xscale = c(0.5, ncol(colMatOrder) + 0.5),
yscale = c(0.5, nrow(colMatOrder) + 0.5)))
grid.rect()
for (i in 1:nrow(colMatOrder)) {
for (j in 1:ncol(colMatOrder)) {
x <- j
y <- nrow(colMatOrder) - i + 1
grid.rect(x = x, y = y, width = 1, height = 1, default.units = "native",
gp = gpar(col = NA, fill = colMatOrder[i, j]))
}
grid.text(label = names(val), x = 1:ncol(val), y = rep(0, ncol(val)),
default.units = "native", rot = -90, just = "left")
popViewport()
dev.off()
colMat <- sapply(1:ncol(val), function(j) {
if (j == ncol(val)) {
# col <- "steelblue"
col = "blue"
} else {
# col <- "darkorange"
col <- "red"
}
setColor(x = val[, j], breaks = breaksMat[, j], col = col)
})
colMatOrder <- colMat[sort.list(val$overall.rating, decreasing = TRUE), ]
png("www/heatmapOrder.png", width = 500, height = 1000)
pushViewport(plotViewport(margins = c(6, 1, 1, 1),
xscale = c(0.5, ncol(colMatOrder) + 0.5),
yscale = c(0.5, nrow(colMatOrder) + 0.5)))
for (i in 1:nrow(colMatOrder)) {
for (j in 1:ncol(colMatOrder)) {
x <- j
y <- nrow(colMatOrder) - i + 1
grid.rect(x = x, y = y, width = 1, height = 1, default.units = "native",
gp = gpar(col = NA, fill = colMatOrder[i, j]))
}
grid.text(label = names(val), x = 1:ncol(val), y = rep(0, ncol(val)),
default.units = "native", rot = -90, just = "left")
popViewport()
dev.off()
library(d3heatmap)
d3heatmap(x, k_row = 4, k_col = 2)
d3heatmap(colMatOrder)
d3heatmap(val)
scoreMat <- sapply(1:ncol(val), function(j) {
scoreMat[assignScore(z = val[, j], theta = breaks[, j])]
})
scoreMat <- sapply(1:ncol(val), function(j) {
assignScore(z = val[, j], theta = breaks[, j])
})
scoreMat <- sapply(1:ncol(val), function(j) {
assignScore(z = val[, j], theta = breaksMat[, j])
})
head(scoreMat)
scoreMatOrder <- scoreMat[sort.list(val$overall.rating, decreasing = TRUE), ]
d3heatmap(scoreMatOrder)
View(scoreMatOrder)
d3heatmap(scoreMatOrder, scale = "column", dendrogram = "none", colors = "red")
colnames(scoreMat) <- names(val)
dev.off()
while(T) dev.off()
rownames(scoreMat) <- movie_table$title
scoreMatOrder <- scoreMat[sort.list(val$overall.rating, decreasing = TRUE), ]
d3heatmap(scoreMatOrder, scale = "column", dendrogram = "none", colors = "red")
dev.off()
install.packages("visNetwork")
install.packages("visNetwork")
install.packages("shiny")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
